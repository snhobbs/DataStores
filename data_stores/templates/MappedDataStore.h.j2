{# Jinja Template #}
/*
 * Copyright {{ timestamp.year }} ElectroOptical Innovations, LLC
 * {{ fname }}
 * Autogenerated file: {{ timestamp.isoformat() }}
 */

#pragma once

#include <DataStores/DataStores.h>
#include <Utilities/TypeConversion.h>
#include <ArrayView/ArrayView.h>
#include <peripheral/Serializer.h>
#include <algorithm>
#include <cstdint>

struct {{ name }} {
  {%- for entry in entries %}
    {%- if(entry.length > 1) %}
    {{ entry.dtype_ctype }} {{ entry.name }}[{{ entry.length }}]{};
    {%- else %}
    {{ entry.dtype_ctype }} {{ entry.name }}{};
    {%- endif %}
  {%- endfor %}
};

enum class {{ name }}EntryIdentifier {
  {%- for entry in entries %}
  {{ entry.name }} ,
  {%- endfor %}
  unknown
};

class {{ name }}Wrapper {
 public:
  static const constexpr std::size_t entries_ = {{ entries | length }};
  static const constexpr std::array<DataStores::StructEntry<{{ name }}EntryIdentifier>, entries_> entry_positions_ {
    {%- for entry in entries %}
    DataStores::StructEntry<{{ name }}EntryIdentifier>{ {{ name }}EntryIdentifier::{{ entry.name }}, offsetof({{ name }}, {{ entry.name }}), sizeof({{ name }}::{{ entry.name }}) },
    {%- endfor %}
  };

 private:
  {{ name }}* data_bank_{};

 public:
  explicit {{ name }}Wrapper({{name}}* data_bank) : data_bank_{data_bank} {}
  static const constexpr std::size_t size() {
    return sizeof({{ name }});
  }

  void SetField(const std::size_t index, const uint8_t* data, const std::size_t size) {
    const {{name}}EntryIdentifier identifier = static_cast<{{name}}EntryIdentifier>(index);
    switch (identifier) {
      case({{name}}EntryIdentifier::unknown): {
        // Ignore this case, should be scrubed
        break;
      }
      {%- for entry in entries %}
      case({{name}}EntryIdentifier::{{ entry.name }}) : {
      {% if entry.length > 1 %}
        read_as_type(data, size, data_bank_->{{ entry.name }}, sizeof(data_bank_->{{ entry.name }}));
      {% else %}
        read_as_type(data, size, &data_bank_->{{ entry.name }}, 1);
      {% endif %}
        break;
      }
      {%- endfor %}
      default:
        break;
    }
  }

  void GetField(const std::size_t index, uint8_t* data, const std::size_t size) const {
    const {{name}}EntryIdentifier identifier = static_cast<{{name}}EntryIdentifier>(index);
    switch (identifier) {
      case({{name}}EntryIdentifier::unknown): {
        // Ignore this case, should be scrubed
        break;
      }
      {%- for entry in entries %}
      case({{name}}EntryIdentifier::{{ entry.name }}) : {
      {% if entry.length > 1 %}
        write_as_type(data, size, data_bank_->{{ entry.name }}, sizeof(data_bank_->{{ entry.name }}));
      {% else %}
        write_as_type(data, size, &data_bank_->{{ entry.name }}, 1);
      {% endif %}
        break;
      }
      {%- endfor %}
      default:
        break;
    }
  }

  {%- for entry in entries %}
  {%- if entry.length > 1 %}
  ArrayView<const {{ entry.dtype_ctype }}> get_{{ entry.name }}(void) const {
    return ArrayView<const {{ entry.dtype_ctype }}>{ {{ entry.length }}, data_bank_->{{ entry.name }} };
  }
  void set_{{ entry.name }}(const {{ entry.dtype_ctype }} *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->{{ entry.name }}[i] = value[i];
    }
  }
  {%- else %}
  {{ entry.dtype_ctype }} get_{{ entry.name }}(void) const {
    return data_bank_->{{ entry.name }};
  }
  void set_{{ entry.name }}({{ entry.dtype_ctype }} value) {
    data_bank_->{{ entry.name }} = value;
  }
  {%- endif %}
  {%- endfor %}
  };  // class {{name}}Wrapper
